// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id          Int       @id @default(autoincrement())
  firstName   String    @db.VarChar(50)
  lastName    String    @db.VarChar(50)
  email       String    @unique @db.VarChar(100)
  password    String    @db.VarChar(255)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  roleId      Int
  role        Role      @relation(fields: [roleId], references: [id])
  createdJobs Job[]     @relation("JobCreator")
  updatedJobs Job[]     @relation("JobUpdater")
  applications UserJobApplication[]
}

model Role {
  id      Int      @id @default(autoincrement())
  name    String   @unique @db.VarChar(20)
  users   Profile[]
}

model Job {
  id          String    @id @default(uuid())
  title       String    @db.VarChar(255)
  description String
  imageUrl    String?   @db.Text
  isActive    Boolean   @default(true)
  postedAt    DateTime  @default(now())
  company     String    @db.VarChar(100)
  salary      Int
  createdBy   Int
  updatedBy   Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

  creator     Profile   @relation("JobCreator", fields: [createdBy], references: [id])
  updater     Profile?  @relation("JobUpdater", fields: [updatedBy], references: [id])
  applications UserJobApplication[]
}

model UserJobApplication {
  userId     Int 
  jobId      String
  appliedAt  DateTime  @default(now())
  status     String    @default("applied") @db.VarChar(20)

  user       Profile   @relation(fields: [userId], references: [id])
  job        Job       @relation(fields: [jobId], references: [id])

  @@id([userId, jobId])
}
